/* autogenerated by Processing revision 1279 on 2022-05-13 */
import processing.core.*;
import processing.data.*;
import processing.event.*;
import processing.opengl.*;

import java.util.List;
import java.util.*;
import java.util.stream.Collectors;

import java.util.HashMap;
import java.util.ArrayList;
import java.io.File;
import java.io.BufferedReader;
import java.io.PrintWriter;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.IOException;

public class elevator_simulator extends PApplet {

Building bu;
 public void setup() {
  /* size commented out by preprocessor */;
  bu = new Building(10);
  Elevator el1 = new Elevator(30,730,1,1,0);
  Elevator el2 = new Elevator(70,730,2,1,0);
  Elevator el3 = new Elevator(110,730,3,1,0);
  Elevator el4 = new Elevator(150,730,4,1,0);
  bu.addElevator(el1);
  bu.addElevator(el2);
  bu.addElevator(el3);
  bu.addElevator(el4);
  
}

  
 public void draw(){
  
  background(255);
  bu.drawFloor();
  bu.drawElevator();
  //bu.drawTest();
  //for(Floor e:bu.floorList){
  //  e.checkButton();
  //}
  bu.update();
}



public class Building {
    public List<Elevator> elevatorList;
    public List<Floor> floorList;
    boolean test = false;
    public Building(int floorNum){
      elevatorList = new ArrayList<>();
      floorList = new ArrayList<>();
      for(int i = 0;i < floorNum;i++){
        floorList.add(new Floor(i));
      }
    }
    public void addElevator(Elevator elevator){
      elevatorList.add(elevator);
    }
    public void drawElevator(){
      for(Elevator e:elevatorList){
        
        if(e.nextToGo != null){
          if(e.nextToGo.arrived&&e.nextToGo.upPressed){
            //System.out.println("Building: arrive signal receved from elevator");
            floorList.get(9-e.nextToGo.floor).bs.upPressed = false;
            e.arrive();
          }
         
          else if(e.nextToGo.arrived&&e.nextToGo.downPressed){
           //System.out.println("Building: arrive signal receved from elevator");
           floorList.get(9-e.nextToGo.floor).bs.downPressed = false;
           e.arrive();
          }
          else if(e.nextToGo.arrived&&!e.nextToGo.downPressed&&!e.nextToGo.upPressed){
           //System.out.println("Building: arrive signal receved from elevator");
           e.ep.buttons.get(e.nextToGo.floor).pressed = false;
           
           e.arrive();
          }
          
        }
        else{
        }
        e.drawElevator();
        
        
      }
    }
    public void drawFloor(){
     
      for(Floor f : floorList){
         f.bs.drawButtonSet();
         rect(30,730 - (f.id) * 80,elevatorList.size() * 40,80);
         
         //for(Elevator e:elevatorList){
         //  rect(10 + e.id * 40,720 - (i.id - 1) * 70,20,20);
         //  rect(10 + e.id * 40,750 - (i.id - 1) * 70 ,20,20);
         //}
      }
      
    }
    //public void drawTest(){
    //  rect(400,100,40,40);
    //}
    
   public void upDispatch(int floorId){   //return the id of the elevator that suit for this task
      int distance = 100;
      int elevatorToAssign = 1;
      int idleElevator = -1;
      int idleDistance = 100;
      for(Elevator e: elevatorList){
        System.out.println("id:  "+e.id);
        if(e.floor < floorId && e.nextToGo != null){ 
          if(e.nextToGo.floor > floorId && e.nextToGo.upPressed){
            System.out.println("**********************************************passing by target**************************************************************");
            e.floorTogo.add(0,e.nextToGo);
            e.nextToGo = new FloorInfo(floorId,true,false);
          
            return;
          }
          
        }
        if(e.nextToGo == null){
          System.out.println("**********************************************idle elevator**************************************************************");
          System.out.println("temp:" + Math.abs(e.floor - floorId));
          if(Math.abs(e.floor - floorId) < idleDistance || idleDistance == -1) {
            idleDistance = Math.abs(e.floor - floorId);
            idleElevator = e.id;
          }
        }
        else{
          System.out.println("**********************************************compara distance**************************************************************");
          int temp = e.totalTask();
          System.out.println("temp:" + temp);
          if(temp < distance){
            
            distance = temp;
            elevatorToAssign = e.id;
          }
          
        }
      }
      if(idleElevator != -1){
        System.out.println("idle elevator Assign:" + idleElevator);
        elevatorList.get(idleElevator - 1).floorTogo.add(new FloorInfo(floorId,true,false));
        return;
      }
      System.out.println("elevatorToAssign:" + elevatorToAssign);
      elevatorList.get(elevatorToAssign - 1).floorTogo.add(new FloorInfo(floorId,true,false));
      
    }
    public void downDispatch(int floorId){
      int distance = 100;
      int idleDistance = 100;
      int elevatorToAssign = 1;
      int idleElevator = -1;
      for(Elevator e: elevatorList){
        System.out.println("id: "+e.id);
        if(e.floor > floorId && e.nextToGo != null){ 
          if(e.nextToGo.floor < floorId && e.nextToGo.downPressed){
            System.out.println("**********************************************passing by target**************************************************************");
            e.floorTogo.add(0,e.nextToGo);
            e.nextToGo = new FloorInfo(floorId,false,true);
          
            return;
          }
          
        }
        if(e.nextToGo == null){
          System.out.println("**********************************************idle elevator**************************************************************");
          System.out.println("temp:" + Math.abs(e.floor - floorId));
          if(Math.abs(e.floor - floorId) < idleDistance || idleDistance == -1) {
            idleDistance = Math.abs(e.floor - floorId);
            idleElevator = e.id;
          }
         
          
        }
        else{
          System.out.println("**********************************************compara distance**************************************************************");
          int temp = e.totalTask();
          System.out.println("temp:" + temp);
          if(temp < distance){
            distance = temp;
            elevatorToAssign = e.id;
          }
          
        }
      }
      if(idleElevator != -1){
        System.out.println("idle elevator Assign:" + idleElevator);
        elevatorList.get(idleElevator - 1).floorTogo.add(new FloorInfo(floorId,false,true));
        return;
      }
      System.out.println("elevatorToAssign:" + elevatorToAssign);
      elevatorList.get(elevatorToAssign - 1).floorTogo.add(new FloorInfo(floorId,false,true));
      
    }
    class SortByFloor implements Comparator<FloorInfo> {  
    public int compare(FloorInfo a, FloorInfo b)  
    {  
       if(a.floor > b.floor) return 1;
       else{
         return -1;
       }
       
    }  
  }
    
     public void update(){
      
     //drawElevator();
     
     
     textSize(16);
     fill(0);
     for(Elevator e: elevatorList){
       StringBuilder sb = new StringBuilder();
       sb.append("No."+e.id+"Elevator:");
       sb.append(e.floor+"  ");
       sb.append("elevatorPressed  "+e.elevatorPressed);
       sb.append("  floorTogo: ");
       if(e.direction==1){
         //sb.append("up");
       }else if(e.direction==-1){
         //sb.append("down");
       }
       
       if(e.nextToGo != null) sb.append(e.nextToGo.floor+" ");
       
       for(FloorInfo i:e.floorTogo){
            sb.append(i.floor+" ");
             
       }
       text(sb.toString(),400,-150+e.id*200);
       //System.out.println(e.elevatorPressed);
       for(int i = 0;i < e.ep.buttons.size();i++){
         if(e.ep.buttons.get(i).pressed == true){
           boolean needAdd = true;
           if(e.nextToGo != null){
             if(e.nextToGo.floor == i){
               needAdd = false;
             }
           }
           if(e.elevatorPressed > 0  && needAdd){
             int temp;
             if(!e.nextToGo.upPressed && !e.nextToGo.downPressed){
                temp = e.elevatorPressed - 1;
             }
             else{
               temp = e.elevatorPressed;
             }
             for(int j = 0;j < temp;j++){
               if(e.floorTogo.get(j).floor == i){
                 needAdd = false;
               }
             }
           }
           
           
           
           
           if(needAdd){
             boolean nextIs = false;
             System.out.println("needAdd");
             
             if(e.nextToGo != null){
               if(!e.nextToGo.upPressed && !e.nextToGo.downPressed){
                  e.elevatorPressed += 1;
                 e.floorTogo.add(0,new FloorInfo(i,false,false));
                 //e.taskManage();
                 e.floorTogo.add(0,e.nextToGo);
                 
                 List<FloorInfo> lesstemp = new ArrayList<>(); 
    List<FloorInfo> overtemp = new ArrayList<>();
    //boolean temp = false;
    if(e.pickupUp) e.up = 1;
    else if(e.pickupDown) e.up = -1;
    
    
    System.out.println("taskManage called: up = " +e.up);
      for(int j = 0;j < e.elevatorPressed;j++){
        if(e.floorTogo.get(j).floor < e.floor){
          lesstemp.add(e.floorTogo.get(j));
        }
        else{
          overtemp.add(e.floorTogo.get(j));
        }
        
      }
      Collections.sort(lesstemp, new SortByFloor());
      Collections.sort(overtemp, new SortByFloor()); 
    if(e.up==-1){
      System.out.println("going down first");
      for(int j = 0;j < lesstemp.size();j++){
        e.floorTogo.set(lesstemp.size() - j - 1,lesstemp.get(j));
      }
      for(int j = lesstemp.size();j < e.elevatorPressed;j++){
       e.floorTogo.set(j,overtemp.get(overtemp.size()-(j - lesstemp.size()) - 1));
      }
    }
    else if(e.up==1){
      System.out.println("going up first");
      for(int j = 0;j < overtemp.size();j++){
        e.floorTogo.set(j,overtemp.get(j));
      }
      for(int j = overtemp.size();j < e.elevatorPressed;j++){
        e.floorTogo.set(j,lesstemp.get(lesstemp.size() - (j-overtemp.size()) - 1));
      }
    }
    e.nextToGo = e.floorTogo.get(0);
    e.floorTogo.remove(0);
                 
                 nextIs = true;
               }
             }
             if(!nextIs){
               e.floorTogo.add(0,new FloorInfo(i,false,false));
               e.elevatorPressed += 1;
             }
             
            
             
           }
          
         }
         
       }
     }
     for(Floor f : floorList){
       if(f.bs.upPressed==true){      
         //up button is pressed for that floor,check if that floor is already in some elevator's togo list
         boolean needToAdd = true;
         for(Elevator e: elevatorList){
           if(e.nextToGo != null){
             if(e.nextToGo.floor == f.id && e.nextToGo.upPressed) needToAdd = false;
           }
           
           for(FloorInfo i:e.floorTogo){
             if(i.floor == f.id && i.upPressed){
               needToAdd = false;
             }
             
             
             
           }
         }
         if(needToAdd){
           upDispatch(f.id);   //
         }
         
       }
       if(f.bs.downPressed == true){
         boolean needToAdd = true;
         for(Elevator e: elevatorList){
           if(e.nextToGo != null){
             if(e.nextToGo.floor == f.id && e.nextToGo.downPressed) needToAdd = false;
           }
           for(FloorInfo i:e.floorTogo){
             if(i.floor == f.id && i.downPressed){
               needToAdd = false;
             }
           }
         }
         if(needToAdd){
           System.out.println("I'm here");
           downDispatch(f.id);    
         }
         
       }
      
     }
      
    }
    
}

public class ButtonSet{
  int x;
  int y;
  int floor;
  boolean upPressed;
  boolean downPressed;
  int upButtonColor=255;
  int downButtonColor=255;
 
  public ButtonSet(int x,int y, int floor){
    this.x=x;
    this.y=y;
    this.floor=floor;
    upPressed=false;
    downPressed=false;
  }
  
   public boolean overCircle(int x, int y, int diameter) {
    float disX = x - mouseX;
    float disY = y - mouseY;
    if (sqrt(sq(disX) + sq(disY)) < diameter/2 ) {
      return true;
    } else {
      return false;
    }
  }
  
   public void drawButtonSet(){
    if (overCircle(x, y+15, 25)&&mousePressed) {
      //add down event here!
      downPressed=true;
    }
    if (overCircle(x, y-15, 25)&&mousePressed) {
       //add up event here!
      upPressed=true;
    }
    
    if(upPressed){
      upButtonColor = color(255, 230, 0);
    }else{
      upButtonColor = 255;
    }
    
    if(downPressed){
      downButtonColor = color(255, 230, 0);
    }else{
      downButtonColor = 255;
    }
    
    fill(downButtonColor);
    circle(x, y+15, 25);
    fill(200);
    triangle(x,y+23,x+8,y+10,x-8,y+10);
    fill(upButtonColor);
    circle(x, y-15, 25);
    fill(200);
    triangle(x,y-23,x+8,y-10,x-8,y-10);
    fill(255);
  }
  //void upFloorReached(int floor){
    
  //}
  //void downFloorReached(int floor){
    
  //}
  
}




public class Elevator {
  int positionX;
  int positionY;
  int id;
  int floor;
  int direction;              //1 going up, 0 stale, -1 going down
  int elevatorPressed;
  FloorInfo nextToGo;
  boolean pickupUp;
  boolean pickupDown;
  List<FloorInfo> floorTogo;
  ElevatorPanel ep;
  final int speed = 1;                  //1 floor per second
  int wait = 150;
  int up =  0;
  
  public Elevator(int positionX,int positionY,int id,int floor,int direction){
    this.positionX = positionX;
    this.positionY = positionY;
    this.id = id;
    this.floor = floor;
    this.direction = direction;
    floorTogo=new ArrayList<FloorInfo>();
    ep = new ElevatorPanel(id);
  }
  
  public void setDirection(int d){
    direction = d;
  }
  class SortByFloor implements Comparator<FloorInfo> {  
    public int compare(FloorInfo a, FloorInfo b)  
    {  
       if(a.floor > b.floor) return 1;
       else{
         return -1;
       }
       
    }  
  }  
  public int totalTask(){
    int sum = 0;
    
    for(int i = floorTogo.size() - 1;i > 0; i--){
      sum += Math.abs(floorTogo.get(i).floor - floorTogo.get(i - 1).floor);
    }
    if(nextToGo != null){
      if(floorTogo.size()>0){
        sum += Math.abs(nextToGo.floor - floorTogo.get(0).floor);
      }
      sum += Math.abs(floor - nextToGo.floor);
      
    }
    
    
    
    return sum;
  }
  
  //public int nextTogo(List<Integer> floorTogo){//select the nearest elevator in togolist
    //return Collections.min(floorTogo.stream().map(i->Math.abs(i-floor)).collect(Collectors.toList()));
    
  //}
  //public void findNext(){
  //  if(floorTogo.isEmpty()){
  //    nextToGo = 0;
  //    return;
  //  }
  //  if(nextToGo != 0){
  //   return;
  //  }
  //  else{
  //    nextToGo = floorTogo.get(0);
  //    floorTogo.remove(0);
  //    //for(int i : floorTogo){
  //    //  if(direction > 0){
          
  //    //  }
  //    //  else if(direction < 0){
  //    //  }
  //    //  else{
          
  //    //  }
        
  //    }
      
  //  }
   public void taskManage(){
    List<FloorInfo> lesstemp = new ArrayList<>(); 
    List<FloorInfo> overtemp = new ArrayList<>();
    //boolean temp = false;
    if(nextToGo.upPressed) up = 1;
    else if(nextToGo.downPressed) up = -1;
    
    
    System.out.println("taskManage called: up = " +up);
      for(int i = 0;i < elevatorPressed;i++){
        if(floorTogo.get(i).floor < floor){
          lesstemp.add(floorTogo.get(i));
        }
        else{
          overtemp.add(floorTogo.get(i));
        }
        
      }
      Collections.sort(lesstemp, new SortByFloor());
      Collections.sort(overtemp, new SortByFloor()); 
    if(up==-1){
      System.out.println("going down first");
      for(int i = 0;i < lesstemp.size();i++){
        floorTogo.set(lesstemp.size() - i - 1,lesstemp.get(i));
      }
      for(int i = lesstemp.size();i < elevatorPressed;i++){
        floorTogo.set(i,overtemp.get(overtemp.size()-(i - lesstemp.size()) - 1));
      }
    }
    else if(up==1){
      System.out.println("going up first");
      for(int i = 0;i < overtemp.size();i++){
        floorTogo.set(i,overtemp.get(i));
      }
      for(int i = overtemp.size();i < elevatorPressed;i++){
        floorTogo.set(i,lesstemp.get(lesstemp.size() - (i-overtemp.size()) - 1));
      }
    }
    
    
    
      
    
  }
   public void arrive(){
    if(wait == 0){
      if(!nextToGo.upPressed &&!nextToGo.downPressed) 
          elevatorPressed --;
      if(floorTogo.size() != 0){
        System.out.println("id: "+id +"task queue is not empty");
        if(elevatorPressed > 0){
          taskManage();
          
        }
        
        nextToGo = floorTogo.get(0);
        floorTogo.remove(0);
      
      }
      else{
        
        System.out.println("no other task");
        nextToGo = null;
        //task queue is empty
      }
      wait = 150;
    }
    
    
  }
  
   public void drawElevator(){
    ep.drawElevatorPanel();
    //check if need to change direction
    
    
    //findNext();
    if(nextToGo != null){
      //print("elevatorId: "+ id+"  current floor:" + floor + "  ");
      //println("floor to go " + nextToGo.floor);
      //for(int i = 0;i < floorTogo.size();i++){
      //  System.out.print(floorTogo.get(i).floor+ "  ");
      //}
      //System.out.println("next to go: "+nextToGo.floor);
     if(nextToGo.floor > floor){
       pickupDown = false;
       pickupUp = true;
       setDirection(1);
     }else if(nextToGo.floor < floor){
       pickupDown = true;
       pickupUp = false;
       setDirection(-1);
     }else{
       //reach target floor, stop elevator
       nextToGo.arrived=true;
       //System.out.println("elevator: "+ id +" arrived" + " wait: "+ wait);
       if(wait > 0){
         
         setDirection(0);
         wait --;
       }
       else{
         
         //nextToGo.arrived=true;
         //if(nextToGo.upPressed){
         //  Building.floorList.get(nextToGo.floor - 1).bs.upPressed = false;
         //}
         //if(nextToGo.downPressed){
         //  Building.floorList.get(nextToGo.floor - 1).bs.downPressed = false;
         //}
         //nextToGo = floorTogo.get(0);
         //floorTogo.remove(0);
         //wait = 150;
       }
       
     }
    }
    else{
      //nextToGo = null
      if(floorTogo.size() > 0){
        nextToGo = floorTogo.get(0);
        floorTogo.remove(0);
      }
    }
    positionY = positionY - direction * speed;
    if(positionY == 10 + 0 * 80) floor = 9;
    if(positionY == 10 + 1 * 80) floor = 8;
    if(positionY == 10 + 2 * 80) floor = 7;
    if(positionY == 10 + 3 * 80) floor = 6;
    if(positionY == 10 + 4 * 80) floor = 5;
    if(positionY == 10 + 5 * 80) floor = 4;
    if(positionY == 10 + 6 * 80) floor = 3;
    if(positionY == 10 + 7 * 80) floor = 2;
    if(positionY == 10 + 8 * 80) floor = 1;
    if(positionY == 10 + 9 * 80) floor = 0;
    if(wait != 150){
      fill(0);
    }
    else{
      fill(255);
    }
    rect(positionX, positionY, 20, 45);
    
    
    
  }
  
}

public class ElevatorPanel{
//  List<ButtonSet> buttonSets = new ArrayList<ButtonSet>();
  List<NumberButton> buttons = new ArrayList<NumberButton>();
  int id;
  public ElevatorPanel(int id){
    this.id = id;
  //  this.buttonSets=buttonSets;
    for(int i=0;i<10;i++){
      buttons.add(new NumberButton(i));
    }
  }
  
 public class NumberButton{
    int floor;
    boolean pressed;
    public NumberButton(int floor){
      this.floor=floor;
    }
  }
  
   public boolean overCircle(int x, int y, int diameter) {
    float disX = x - mouseX;
    float disY = y - mouseY;
    if (sqrt(sq(disX) + sq(disY)) < diameter/2 ) {
      return true;
    } else {
      return false;
    }
  }
  
  
  public void drawElevatorPanel(){
    
    for(int i=0;i<5;i++){
      if(overCircle(400+i*50, -120+id*200,25)&&mousePressed){
        buttons.get(i).pressed = true;
      }
      if( buttons.get(i).pressed == true){
       fill(color(255, 230, 0));
      }else{
       fill(255);
      }
      circle(400+i*50, -120+id*200, 25);
      fill(0);
      textSize(16);
      text(i+1,395+i*50,-115+id*200);
    }
    
    for(int i=5;i<9;i++){
      if(overCircle(150+i*50, -90+id*200, 25)&&mousePressed){
        buttons.get(i).pressed = true;
      }
      if( buttons.get(i).pressed == true){
       fill(color(255, 230, 0));
      }else{
       fill(255);
      }
      
      circle(150+i*50, -90+id*200, 25);
      fill(0);
      textSize(16);
      text(i+1,145+i*50,-85+id*200);
    }
    
     if(overCircle(150+9*50, -90+id*200, 25)&&mousePressed){
        buttons.get(9).pressed = true;
     }
     if( buttons.get(9).pressed == true){
       fill(color(255, 230, 0));
     }else{
       fill(255);
     }
     circle(150+9*50, -90+id*200, 25);
     fill(0);
     textSize(16);
     text(9+1,142+9*50,-85+id*200);
     
     
    
     //for(int i=0;i<10;i++){
     //  //not finish here!!!!!
     //   if (overCircle(400+i*15, 420+id*50, 25)&&mousePressed) {
     //     System.out.println("I'm here");
     //     buttons.get(i).pressed=true;
     //   }
     //}    
    
  }
}

public class Floor {
    int id;
    int positionY;              //building height is from 810 - 10, each floor is 80  
    ButtonSet bs;
    public Floor(int id){
      this.id = 9 - id;
      bs= new ButtonSet(220,id*80 + 50,9 - id);
      positionY = 80 * id + 10;
    }
    
    

}
public class FloorInfo{
  int floor;
  boolean upPressed;
  boolean downPressed;
  boolean arrived;
  public FloorInfo(int floor, boolean upPressed,boolean downPressed){
    this.floor = floor;
    this.upPressed = upPressed;
    this.downPressed = downPressed;
    this.arrived = false;
  }
  
}


  public void settings() { size(800, 1000); }

  static public void main(String[] passedArgs) {
    String[] appletArgs = new String[] { "elevator_simulator" };
    if (passedArgs != null) {
      PApplet.main(concat(appletArgs, passedArgs));
    } else {
      PApplet.main(appletArgs);
    }
  }
}
